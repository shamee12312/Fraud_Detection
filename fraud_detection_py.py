# -*- coding: utf-8 -*-
"""fraud-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c9Cc3EzkMSyEzIGaNdVJzMmTUKwiwgyw
"""

!pip uninstall catboost -y
!pip install catboost

import os

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    accuracy_score,
    recall_score,
    precision_score,
    f1_score,
    classification_report,
    confusion_matrix
)

from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier

from catboost import CatBoostClassifier
from xgboost import XGBClassifier

df = pd.read_csv("Fraud.csv")
df.shape

df.head()

df.info()

df.describe()

df.isna().sum()

def plot_pie_chart(column, labels, y_label, title, ax=None):
    (df[column].value_counts() * 100.0 / len(df)).plot.pie(
        autopct="%.1f%%",
        labels=labels,
        ax=ax,
        fontsize=12
    )
    ax.yaxis.set_major_formatter(mtick.PercentFormatter())
    ax.set_ylabel(y_label, fontsize=12)
    ax.set_title(title, fontsize=12)

df.type.value_counts()

fig, axs = plt.subplots(1, 1)
plot_pie_chart('type', list((df['type'].value_counts()).index) ,"", '% of Type', axs)

col = ["isFraud", "isFlaggedFraud"]

df.isFlaggedFraud.value_counts()

df.isFraud.value_counts()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# n_rows = 1
# n_cols = 2
# fig, axs = plt.subplots(n_rows, n_cols, figsize=(10, 30))
# for i, j in enumerate(col):
#     plot_pie_chart(j, list((df[j].value_counts()).index), f'{j}', f'% of {j}', axs[i])
# plt.tight_layout()

df.info()

df.shape

df["type"].value_counts()

df.nameOrig.value_counts()

df.nameDest.value_counts()

sns.violinplot(df.newbalanceDest);

sns.violinplot(df.oldbalanceDest);

plt.figure(figsize=(15, 10))
plt.subplot(2, 2, 1)
plt.boxplot(df.newbalanceDest)
plt.subplot(2, 2, 2)
plt.boxplot(df.oldbalanceDest)
plt.show()

plt.figure(figsize=(15, 10))
plt.subplot(2, 2, 1)
plt.boxplot(df.oldbalanceOrg)
plt.subplot(2, 2, 2)
plt.boxplot(df.newbalanceOrig)
plt.show()

plt.figure(figsize=(15, 10))
plt.subplot(2, 2, 1)
plt.boxplot(df.step)
plt.subplot(2, 2, 2)
plt.boxplot(df.amount)
plt.show()

df.columns

df.drop(
    ['nameOrig', 'nameDest', 'isFlaggedFraud'],
    axis=1,
    inplace=True
)

df.shape

df.head()

df = pd.get_dummies(df)
df.shape

df.head()

"""# Train Test Split"""

xtrain, xtest, ytrain, ytest = train_test_split(
    df.drop(['isFraud'], axis=1),
    df['isFraud'],
    stratify=df['isFraud'],
    test_size=0.1,
    random_state=42
)

xtrain.shape, xtest.shape, ytrain.shape, ytest.shape

xtrain, xval, ytrain, yval = train_test_split(
    xtrain,
    ytrain,
    stratify=ytrain,
    test_size=0.1,
    random_state=42
)

xtrain.shape, xval.shape, ytrain.shape, yval.shape

def metrics(y_test, y_pred):
    print('Accuracy: ', accuracy_score(y_test, y_pred))
    print('Precision: ', precision_score(y_test, y_pred))
    print('Recall: ', recall_score(y_test, y_pred))
    print('F_Score: ', f1_score(y_test, y_pred))
    print('Classification Report')
    print(classification_report(y_test, y_pred))
    print('Confusion Matrix')
    print(confusion_matrix(y_test, y_pred))

def CM(cm):
    sns.heatmap(
        cm,
        annot=True,
        fmt='d',
        cmap='coolwarm',
        linewidths=0.5
    )
    plt.xlabel('Predicted')
    plt.ylabel('Truth')

"""# Random Forest"""

rf = RandomForestClassifier()
rf.fit(xtrain, ytrain)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# rf_y_val_pred = rf.predict(xval)
# rf_y_test_pred = rf.predict(xtest)

metrics(yval, rf_y_val_pred)

cm = confusion_matrix(yval, rf_y_val_pred)
CM(cm)

metrics(ytest, rf_y_test_pred)

cm = confusion_matrix(ytest, rf_y_test_pred)
CM(cm)

"""# XGBoost"""

xg = XGBClassifier()
xg.fit(xtrain, ytrain)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# xg_y_val_pred = xg.predict(xval)
# xg_y_test_pred = xg.predict(xtest)

metrics(yval, xg_y_val_pred)

cm = confusion_matrix(yval, xg_y_val_pred)
CM(cm)

metrics(ytest, xg_y_test_pred)

cm = confusion_matrix(ytest, xg_y_test_pred)
CM(cm)

"""# AdaBoost"""

ada = AdaBoostClassifier()
ada.fit(xtrain, ytrain)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# ada_y_val_pred = ada.predict(xval)
# ada_y_test_pred = ada.predict(xtest)

metrics(yval, ada_y_val_pred)

cm = confusion_matrix(yval, ada_y_val_pred)
CM(cm)

metrics(ytest, ada_y_test_pred)

cm = confusion_matrix(ytest, ada_y_test_pred)
CM(cm)

"""# CatBoost"""

cb = CatBoostClassifier()
cb.fit(xtrain, ytrain)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# cat_y_val_pred = cb.predict(xval)
# cat_y_test_pred = cb.predict(xtest)

metrics(yval, cat_y_val_pred)

cm = confusion_matrix(yval, cat_y_val_pred)
CM(cm)

metrics(ytest, cat_y_test_pred)

cm = confusion_matrix(ytest, cat_y_test_pred)
CM(cm)

